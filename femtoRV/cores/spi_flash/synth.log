
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4288 (git sha1 b2e97174, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/home/runner/work/conda-eda/conda-eda/workdir/conda-env/conda-bld/yosys_1630451134687/work=/usr/local/src/conda/yosys-0.9_5586_gb2e97174 -fdebug-prefix-map=/home/carlos/miniconda3/envs/fpga=/usr/local/src/conda-prefix -fPIC -Os -fno-merge-constants)


-- Executing script file `synt_spi_flash' --

1. Executing Liberty frontend.
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: MappedSPIFlash_V3.v
Parsing Verilog input from `MappedSPIFlash_V3.v' to AST representation.
Generating RTLIL representation for module `\MappedSPIFlash'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \MappedSPIFlash

3.2. Analyzing design hierarchy..
Top module:  \MappedSPIFlash
Removed 0 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 7 switch rules as full_case in process $proc$MappedSPIFlash_V3.v:67$12 in module MappedSPIFlash.
Marked 2 switch rules as full_case in process $proc$MappedSPIFlash_V3.v:43$1 in module MappedSPIFlash.
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 1 assignment to connection.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
     1/13: $7\state[2:0]
     2/13: $6\state[2:0]
     3/13: $5\state[2:0]
     4/13: $4\state[2:0]
     5/13: $3\state[2:0]
     6/13: $2\state[2:0]
     7/13: $1\state[2:0]
     8/13: $0\rcv_data[31:0]
     9/13: $0\rcv_bitcount[5:0]
    10/13: $0\cmd_addr[31:0]
    11/13: $0\snd_bitcount[5:0]
    12/13: $0\CS_N[0:0]
    13/13: $0\rbusy[0:0]
Creating decoders for process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:43$1'.
     1/3: $0\div_counter[5:0]
     2/3: $0\clk_div[0:0]
     3/3: $0\CLK[0:0]

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\MappedSPIFlash.\rbusy' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
  created $dff cell `$procdff$196' with negative edge clock.
Creating register for signal `\MappedSPIFlash.\CS_N' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
  created $dff cell `$procdff$197' with negative edge clock.
Creating register for signal `\MappedSPIFlash.\state' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
  created $dff cell `$procdff$198' with negative edge clock.
Creating register for signal `\MappedSPIFlash.\snd_bitcount' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
  created $dff cell `$procdff$199' with negative edge clock.
Creating register for signal `\MappedSPIFlash.\cmd_addr' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
  created $dff cell `$procdff$200' with negative edge clock.
Creating register for signal `\MappedSPIFlash.\rcv_bitcount' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
  created $dff cell `$procdff$201' with negative edge clock.
Creating register for signal `\MappedSPIFlash.\rcv_data' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
  created $dff cell `$procdff$202' with negative edge clock.
Creating register for signal `\MappedSPIFlash.\CLK' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:43$1'.
  created $dff cell `$procdff$203' with negative edge clock.
Creating register for signal `\MappedSPIFlash.\clk_div' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:43$1'.
  created $dff cell `$procdff$204' with negative edge clock.
Creating register for signal `\MappedSPIFlash.\div_counter' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:43$1'.
  created $dff cell `$procdff$205' with negative edge clock.

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 7 empty switches in `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
Removing empty process `MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
Found and cleaned up 3 empty switches in `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:43$1'.
Removing empty process `MappedSPIFlash.$proc$MappedSPIFlash_V3.v:43$1'.
Cleaned up 10 empty switches.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

5. Executing FSM pass (extract and optimize FSM).

5.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register MappedSPIFlash.state.

5.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\state' from module `\MappedSPIFlash'.
  found $dff cell for state register: $procdff$198
  root of input selection tree: $procmux$83_Y
  found reset state: 3'000 (guessed from mux tree)
  found ctrl input: \reset
  found state code: 3'000
  found ctrl input: $procmux$75_CMP
  found ctrl input: $procmux$76_CMP
  found ctrl input: $procmux$77_CMP
  found ctrl input: $procmux$78_CMP
  found ctrl input: $procmux$35_CMP
  found ctrl input: \clk_div
  found ctrl input: $procmux$26_CMP
  found ctrl input: $eq$MappedSPIFlash_V3.v:118$16_Y
  found state code: 3'011
  found ctrl input: $procmux$58_CMP
  found ctrl input: $procmux$48_CMP
  found ctrl input: $eq$MappedSPIFlash_V3.v:102$14_Y
  found state code: 3'010
  found ctrl input: $procmux$69_CMP
  found ctrl input: \rstrb
  found state code: 3'001
  found ctrl output: $procmux$26_CMP
  found ctrl output: $procmux$35_CMP
  found ctrl output: $procmux$48_CMP
  found ctrl output: $procmux$58_CMP
  found ctrl output: $procmux$69_CMP
  found ctrl output: $procmux$75_CMP
  found ctrl output: $procmux$76_CMP
  found ctrl output: $procmux$77_CMP
  found ctrl output: $procmux$78_CMP
  found ctrl output: $procmux$93_CMP
  found ctrl output: $procmux$105_CMP
  found ctrl output: $procmux$112_CMP
  found ctrl output: $procmux$113_CMP
  found ctrl output: $procmux$126_CMP
  found ctrl output: $procmux$130_CMP
  found ctrl output: $procmux$143_CMP
  found ctrl output: $procmux$147_CMP
  found ctrl output: $procmux$148_CMP
  found ctrl output: $procmux$159_CMP
  found ctrl output: $procmux$160_CMP
  found ctrl output: $procmux$171_CMP
  found ctrl output: $procmux$172_CMP
  ctrl inputs: { $eq$MappedSPIFlash_V3.v:118$16_Y $eq$MappedSPIFlash_V3.v:102$14_Y \clk_div \rstrb \reset }
  ctrl outputs: { $procmux$172_CMP $procmux$171_CMP $procmux$160_CMP $procmux$159_CMP $procmux$148_CMP $procmux$147_CMP $procmux$143_CMP $procmux$130_CMP $procmux$126_CMP $procmux$113_CMP $procmux$112_CMP $procmux$105_CMP $procmux$93_CMP $procmux$83_Y $procmux$78_CMP $procmux$77_CMP $procmux$76_CMP $procmux$75_CMP $procmux$69_CMP $procmux$58_CMP $procmux$48_CMP $procmux$35_CMP $procmux$26_CMP }
  transition:      3'000 5'----0 ->      3'000 25'1010100001000000100000000
  transition:      3'000 5'----1 ->      3'001 25'1010100001000001100000000
  transition:      3'010 5'----0 ->      3'000 25'0000001010100000001001100
  transition:      3'010 5'--0-1 ->      3'010 25'0000001010100010001001100
  transition:      3'010 5'-01-1 ->      3'010 25'0000001010100010001001100
  transition:      3'010 5'-11-1 ->      3'011 25'0000001010100011001001100
  transition:      3'001 5'----0 ->      3'000 25'0101010100000000010010000
  transition:      3'001 5'---01 ->      3'001 25'0101010100000001010010000
  transition:      3'001 5'---11 ->      3'010 25'0101010100000010010010000
  transition:      3'011 5'----0 ->      3'000 25'0000000000011000000100011
  transition:      3'011 5'--0-1 ->      3'011 25'0000000000011011000100011
  transition:      3'011 5'0-1-1 ->      3'011 25'0000000000011011000100011
  transition:      3'011 5'1-1-1 ->      3'000 25'0000000000011000000100011

5.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$206' from module `\MappedSPIFlash'.

5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..
Removed 45 unused cells and 103 unused wires.

5.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$206' from module `\MappedSPIFlash'.
  Removing unused output signal $procmux$26_CMP.
  Removing unused output signal $procmux$35_CMP.
  Removing unused output signal $procmux$48_CMP.
  Removing unused output signal $procmux$58_CMP.
  Removing unused output signal $procmux$69_CMP.
  Removing unused output signal $procmux$75_CMP.
  Removing unused output signal $procmux$76_CMP.
  Removing unused output signal $procmux$77_CMP.
  Removing unused output signal $procmux$78_CMP.
  Removing unused output signal $0\state[2:0] [0].
  Removing unused output signal $0\state[2:0] [1].
  Removing unused output signal $0\state[2:0] [2].

5.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\state$206' from module `\MappedSPIFlash' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  000 -> ---1
  010 -> --1-
  001 -> -1--
  011 -> 1---

5.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\state$206' from module `MappedSPIFlash':
-------------------------------------

  Information on FSM $fsm$\state$206 (\state):

  Number of input signals:    5
  Number of output signals:  13
  Number of state bits:       4

  Input signals:
    0: \reset
    1: \rstrb
    2: \clk_div
    3: $eq$MappedSPIFlash_V3.v:102$14_Y
    4: $eq$MappedSPIFlash_V3.v:118$16_Y

  Output signals:
    0: $procmux$93_CMP
    1: $procmux$105_CMP
    2: $procmux$112_CMP
    3: $procmux$113_CMP
    4: $procmux$126_CMP
    5: $procmux$130_CMP
    6: $procmux$143_CMP
    7: $procmux$147_CMP
    8: $procmux$148_CMP
    9: $procmux$159_CMP
   10: $procmux$160_CMP
   11: $procmux$171_CMP
   12: $procmux$172_CMP

  State encoding:
    0:     4'---1  <RESET STATE>
    1:     4'--1-
    2:     4'-1--
    3:     4'1---

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 5'----0   ->     0 13'1010100001000
      1:     0 5'----1   ->     2 13'1010100001000
      2:     1 5'----0   ->     0 13'0000001010100
      3:     1 5'--0-1   ->     1 13'0000001010100
      4:     1 5'-01-1   ->     1 13'0000001010100
      5:     1 5'-11-1   ->     3 13'0000001010100
      6:     2 5'----0   ->     0 13'0101010100000
      7:     2 5'---11   ->     1 13'0101010100000
      8:     2 5'---01   ->     2 13'0101010100000
      9:     3 5'----0   ->     0 13'0000000000011
     10:     3 5'1-1-1   ->     0 13'0000000000011
     11:     3 5'--0-1   ->     3 13'0000000000011
     12:     3 5'0-1-1   ->     3 13'0000000000011

-------------------------------------

5.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\state$206' from module `\MappedSPIFlash'.

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 4 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MappedSPIFlash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MappedSPIFlash.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

6.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$205 ($dff) from module MappedSPIFlash (D = $add$MappedSPIFlash_V3.v:57$7_Y [5:0], Q = \div_counter, rval = 6'000000).
Adding SRST signal on $procdff$204 ($dff) from module MappedSPIFlash (D = $procmux$183_Y, Q = \clk_div, rval = 1'0).
Adding SRST signal on $procdff$203 ($dff) from module MappedSPIFlash (D = $procmux$191_Y, Q = \CLK, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:682:run$282 ($sdff) from module MappedSPIFlash (D = $procmux$191_Y, Q = \CLK).
Adding SRST signal on $procdff$202 ($dff) from module MappedSPIFlash (D = $procmux$92_Y, Q = \rcv_data, rval = 0).
Adding EN signal on $auto$opt_dff.cc:682:run$286 ($sdff) from module MappedSPIFlash (D = { \rcv_data [30:0] \MISO }, Q = \rcv_data).
Adding EN signal on $procdff$201 ($dff) from module MappedSPIFlash (D = $procmux$104_Y, Q = \rcv_bitcount).
Adding SRST signal on $procdff$200 ($dff) from module MappedSPIFlash (D = $procmux$125_Y, Q = \cmd_addr, rval = 0).
Adding EN signal on $auto$opt_dff.cc:682:run$305 ($sdff) from module MappedSPIFlash (D = $procmux$125_Y, Q = \cmd_addr).
Adding EN signal on $procdff$199 ($dff) from module MappedSPIFlash (D = $procmux$142_Y, Q = \snd_bitcount).
Adding SRST signal on $procdff$197 ($dff) from module MappedSPIFlash (D = $procmux$158_Y, Q = \CS_N, rval = 1'1).
Adding EN signal on $auto$opt_dff.cc:682:run$328 ($sdff) from module MappedSPIFlash (D = $procmux$158_Y, Q = \CS_N).
Adding SRST signal on $procdff$196 ($dff) from module MappedSPIFlash (D = $procmux$170_Y, Q = \rbusy, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:682:run$336 ($sdff) from module MappedSPIFlash (D = $procmux$170_Y, Q = \rbusy).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..
Removed 13 unused cells and 43 unused wires.

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

6.9. Rerunning OPT passes. (Maybe there is more to do..)

6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MappedSPIFlash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MappedSPIFlash.
Performed a total of 0 changes.

6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 9 cells.

6.13. Executing OPT_DFF pass (perform DFF optimizations).

6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..
Removed 0 unused cells and 9 unused wires.

6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

6.16. Rerunning OPT passes. (Maybe there is more to do..)

6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MappedSPIFlash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MappedSPIFlash.
Performed a total of 0 changes.

6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

6.20. Executing OPT_DFF pass (perform DFF optimizations).

6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..

6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

6.23. Finished OPT passes. (There is nothing left to do.)

7. Executing MEMORY pass.

7.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

7.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

7.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

7.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

7.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..

7.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

7.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..

7.9. Executing MEMORY_COLLECT pass (generating $mem cells).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MappedSPIFlash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MappedSPIFlash.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /home/carlos/miniconda3/envs/fpga/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Running "alumacc" on wrapper $extern:wrap:$ge:A_SIGNED=0:A_WIDTH=6:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:A_SIGNED=0:A_WIDTH=6:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:A_SIGNED=0:A_WIDTH=6:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=6:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=6:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=6:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $sdffe.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=6:B_SIGNED=0:B_WIDTH=6:Y_WIDTH=6:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=6:B_SIGNED=0:B_WIDTH=6:Y_WIDTH=6:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=6:B_SIGNED=0:B_WIDTH=6:Y_WIDTH=6:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$c15e84c77f007506123baf6c4be45847f0e33a3b\_90_pmux for cells of type $pmux.
Using template $paramod$8fabc56b80a569262acfc42757a02ca0b8e91278\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $or.
Using template $paramod$ae0147484b1ff1c0caf19799670ecd3c54c1601d\_90_alu for cells of type $alu.
Using template $paramod$00298f3f8094950cb9a5ff2fda48d0d8bde8806c\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
No more expansions possible.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 106 cells.

10.3. Executing OPT_DFF pass (perform DFF optimizations).

10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..
Removed 19 unused cells and 666 unused wires.

10.5. Finished fast OPT passes.

11. Executing TECHMAP pass (map to technology primitives).

11.1. Executing Verilog-2005 frontend: ../../../PDK/open_pdks/sky130/openlane/sky130_fd_sc_hd/fa_map.v
Parsing Verilog input from `../../../PDK/open_pdks/sky130/openlane/sky130_fd_sc_hd/fa_map.v' to AST representation.
Generating RTLIL representation for module `\_90_fa'.
Successfully finished Verilog frontend.

11.2. Continuing TECHMAP pass.
No more expansions possible.

12. Executing OPT pass (performing simple optimizations).

12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

12.3. Executing OPT_DFF pass (perform DFF optimizations).

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..

12.5. Finished fast OPT passes.

13. Executing ABC pass (technology mapping using ABC).

13.1. Extracting gate netlist of module `\MappedSPIFlash' to `<abc-temp-dir>/input.blif'..
Extracted 440 gates and 521 wires to a netlist network with 78 inputs and 65 outputs.

13.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Work/VLSI/femtoRV/cores/spi_flash/../../lib/sky130_fd_sc_hd__tt_025C_1v80.lib 
ABC: Parsing finished successfully.  Parsing time =     0.05 sec
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_12" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_3" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_6" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__diode_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlclkp_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlclkp_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlclkp_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__edfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__edfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_0".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_8".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_bleeder_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_12" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_3" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_6" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__lpflow_inputisolatch_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfbbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfbbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfsbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfstp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__sdlclkp_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__sdlclkp_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__sdlclkp_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxtp_4".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/Work/VLSI/femtoRV/cores/spi_flash/../../lib/sky130_fd_sc_hd__tt_025C_1v80.lib" has 334 cells (94 skipped: 63 seq; 13 tri-state; 18 no func; 0 dont_use).  Time =     0.08 sec
ABC: Memory =   16.05 MB. Time =     0.08 sec
ABC: Warning: Detected 9 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a2111oi_0 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21boi_0 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21o_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21oi_1 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a22o_1 cells:       20
ABC RESULTS:   sky130_fd_sc_hd__a31oi_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2_0 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__and3_1 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__clkinv_1 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__lpflow_inputiso1p_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__lpflow_isobufsrc_1 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__nand2_1 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__nand2b_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand3_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor2_1 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__nor3_1 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__nor3b_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor4_1 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o2111ai_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ai_0 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o311ai_0 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31a_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31ai_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o41ai_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xnor2_1 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__xor2_1 cells:        4
ABC RESULTS:        internal signals:      378
ABC RESULTS:           input signals:       78
ABC RESULTS:          output signals:       65
Removing temp directory.

14. Executing OPT pass (performing simple optimizations).

14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

14.3. Executing OPT_DFF pass (perform DFF optimizations).

14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..
Removed 0 unused cells and 259 unused wires.

14.5. Finished fast OPT passes.

15. Executing CHECK pass (checking for obvious problems).
Checking module MappedSPIFlash...
Found and reported 0 problems.

16. Executing Verilog backend.
Dumping module `\MappedSPIFlash'.

17. Generating Graphviz representation of design.
Writing dot description to `/Work/VLSI/femtoRV/.dot'.
Dumping module MappedSPIFlash to page 1.
Exec: { test -f '/Work/VLSI/femtoRV/.dot.pid' && fuser -s '/Work/VLSI/femtoRV/.dot.pid' 2> /dev/null; } || ( echo $$ >&3; exec xdot '/Work/VLSI/femtoRV/.dot'; ) 3> '/Work/VLSI/femtoRV/.dot.pid' &

18. Printing statistics.

=== MappedSPIFlash ===

   Number of wires:                 81
   Number of wire bits:            314
   Number of public wires:          17
   Number of public wire bits:     147
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                199
     $_DFFE_NP_                     12
     $_DFF_N_                        4
     $_SDFFE_NN0P_                  66
     $_SDFFE_NN1P_                   1
     $_SDFF_NN0_                     1
     $_SDFF_NP0_                     6
     sky130_fd_sc_hd__a2111oi_0      1
     sky130_fd_sc_hd__a21boi_0       1
     sky130_fd_sc_hd__a21o_1         2
     sky130_fd_sc_hd__a21oi_1        6
     sky130_fd_sc_hd__a22o_1        20
     sky130_fd_sc_hd__a31oi_1        2
     sky130_fd_sc_hd__and2_0         9
     sky130_fd_sc_hd__and3_1         3
     sky130_fd_sc_hd__buf_1          1
     sky130_fd_sc_hd__clkinv_1       6
     sky130_fd_sc_hd__lpflow_inputiso1p_1      1
     sky130_fd_sc_hd__lpflow_isobufsrc_1      6
     sky130_fd_sc_hd__nand2_1        8
     sky130_fd_sc_hd__nand2b_1       2
     sky130_fd_sc_hd__nand3_1        1
     sky130_fd_sc_hd__nand4_1        2
     sky130_fd_sc_hd__nor2_1        12
     sky130_fd_sc_hd__nor3_1         5
     sky130_fd_sc_hd__nor3b_1        1
     sky130_fd_sc_hd__nor4_1         3
     sky130_fd_sc_hd__o2111ai_1      1
     sky130_fd_sc_hd__o21ai_0        3
     sky130_fd_sc_hd__o311ai_0       1
     sky130_fd_sc_hd__o31a_1         1
     sky130_fd_sc_hd__o31ai_1        1
     sky130_fd_sc_hd__o41ai_1        1
     sky130_fd_sc_hd__or3_1          1
     sky130_fd_sc_hd__or4_1          1
     sky130_fd_sc_hd__xnor2_1        3
     sky130_fd_sc_hd__xor2_1         4

   Area for cell type $_DFF_N_ is unknown!
   Area for cell type $_DFFE_NP_ is unknown!
   Area for cell type $_SDFF_NN0_ is unknown!
   Area for cell type $_SDFF_NP0_ is unknown!
   Area for cell type $_SDFFE_NN0P_ is unknown!
   Area for cell type $_SDFFE_NN1P_ is unknown!

   Chip area for module '\MappedSPIFlash': 683.155200

End of script. Logfile hash: 923d61b9fa, CPU: user 0.53s system 0.03s, MEM: 39.50 MB peak
Yosys 0.9+4288 (git sha1 b2e97174, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/home/runner/work/conda-eda/conda-eda/workdir/conda-env/conda-bld/yosys_1630451134687/work=/usr/local/src/conda/yosys-0.9_5586_gb2e97174 -fdebug-prefix-map=/home/carlos/miniconda3/envs/fpga=/usr/local/src/conda-prefix -fPIC -Os -fno-merge-constants)
Time spent: 38% 1x stat (0 sec), 20% 1x abc (0 sec), ...
